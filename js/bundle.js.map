{"version":3,"file":"bundle.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,IAAI;AACJ,oBAAoB;AACpB;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,IAAI;AACJ,mBAAmB;AACnB;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,yCAAyC;AACzC;AACA;AACA,yCAAyC;AACzC;AACA,KAAK;AACL;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA,wDAAwD;AACxD,+EAA+E;AAC/E,UAAU;AACV;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6CAA6C;AAC7C,qBAAqB;AACrB,OAAO;AACP,KAAK;AACL;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,KAAK;AACL;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;;;;;;;;;;AClIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA,yBAAyB,UAAU,MAAM,UAAU;AACnD,sDAAsD,WAAW;AACjE,8CAA8C,WAAW;AACzD;AACA;AACA;AACA,kDAAkD,WAAW;AAC7D;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,yCAAyC,IAAI,YAAY,cAAc,IAAI;AAC3E;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,oBAAoB,uCAAuC;AAC3D;AACA,2DAA2D;AAC3D,KAAK;AACL,GAAG;AACH;AACA;AACA;;;;;;;;;;;AChEA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA,2CAA2C;AAC3C;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4CAA4C;AAC5C,SAAS;AACT;AACA;AACA,wBAAwB;AACxB;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA,kBAAkB;AAClB;AACA;AACA,oDAAoD;AACpD;AACA;AACA,wDAAwD;AACxD;AACA,6CAA6C;AAC7C;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,sBAAsB;AACtB,GAAG;AACH;AACA;AACA;AACA;AACA,mEAAmE;AACnE,MAAM;AACN,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,sBAAsB;AACtB,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,2CAA2C;AAC3C;AACA,uDAAuD;AACvD,sCAAsC;AACtC;AACA,uDAAuD;AACvD;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA,8CAA8C;AAC9C;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,yCAAyC;AACzC;AACA,iDAAiD,OAAO,MAAM;AAC9D;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,yBAAyB;AACzB,4DAA4D;AAC5D;AACA,wBAAwB;AACxB,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,GAAG;AACR;AACA;AACA;AACA,KAAK,GAAG;AACR;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,GAAG;AACH;AACA;AACA;;;;;;;;;;;ACrCA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC/DA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA;AACA,eAAe,mBAAO,CAAC,4CAAgB;AACvC,WAAW,mBAAO,CAAC,4CAAgB;AACnC,YAAY,mBAAO,CAAC,8CAAiB;AACrC,YAAY,mBAAO,CAAC,8CAAiB;AACrC,YAAY,mBAAO,CAAC,8CAAiB;AACrC,aAAa,mBAAO,CAAC,gDAAkB;AACvC,YAAY,mBAAO,CAAC,8CAAiB;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://food-tabs/./js/modules/calc.js","webpack://food-tabs/./js/modules/cards.js","webpack://food-tabs/./js/modules/forms.js","webpack://food-tabs/./js/modules/modal.js","webpack://food-tabs/./js/modules/slider.js","webpack://food-tabs/./js/modules/tabs.js","webpack://food-tabs/./js/modules/timer.js","webpack://food-tabs/webpack/bootstrap","webpack://food-tabs/./js/script.js"],"sourcesContent":["function calc() {\r\n  let result = document.querySelector('.calculating__result span'), // задаем параметры\r\n    sex,\r\n    height,\r\n    weight,\r\n    age,\r\n    ratio;\r\n\r\n  if (localStorage.getItem('Sex')) {\r\n    sex = localStorage.getItem('Sex'); // проверяем наличие данных в локальной БД и задаем их\r\n  } else {\r\n    sex = 'female'; // если БД пустой - задаем по умоолчанию 'female' и записываем в БД\r\n    localStorage.setItem('Sex', 'female');\r\n  }\r\n\r\n  if (localStorage.getItem('Ratio')) {\r\n    ratio = localStorage.getItem('Ratio'); // проверяем наличие данных в локальной БД и задаем их\r\n  } else {\r\n    ratio = 1.375; // если БД пустой - задаем по умоолчанию 1.375 и записываем в БД\r\n    localStorage.setItem('Ratio', 1.375);\r\n  }\r\n\r\n  function initLocalSetting(selector, activeClass) {\r\n    const elements = document.querySelectorAll(selector); // активируем и деактивируем поля по данных из локальной БД\r\n\r\n    elements.forEach((elem) => {\r\n      elem.classList.remove(activeClass); // отключение всех полей\r\n\r\n      if (localStorage.getItem('Sex') === elem.getAttribute('id')) {\r\n        elem.classList.add(activeClass); // сравниваем данные из БД и данные из полей, если одинаковы то активируем\r\n      }\r\n      if (localStorage.getItem('Ratio') === elem.getAttribute('data-ratio')) {\r\n        elem.classList.add(activeClass); // сравниваем данные из БД и данные из полей, если одинаковы то активируем\r\n      }\r\n    });\r\n  }\r\n\r\n  initLocalSetting('#gender div', 'calculating__choose-item_active'); // активируем поля с значениями по-умолчанию\r\n  initLocalSetting(\r\n    '.calculating__choose_big div',\r\n    'calculating__choose-item_active'\r\n  );\r\n\r\n  function calcTotal() {\r\n    //счёт и вывод результатов калькулятора\r\n    if (!(height && weight && age && sex && ratio)) {\r\n      // проверка на заполненность всех полей\r\n      result.textContent = '____';\r\n      return;\r\n    }\r\n\r\n    if (sex === 'female') {\r\n      // если женщина\r\n      result.textContent = Math.round(\r\n        (447.6 + 9.2 * weight + 3.1 * height - 4.3 * age) * ratio\r\n      );\r\n    } else {\r\n      // если мужчина\r\n      result.textContent = Math.round(\r\n        (88.36 + 13.4 * weight + 4.8 * height - 5.7 * age) * ratio\r\n      );\r\n    }\r\n  }\r\n\r\n  calcTotal(); // ставим поумолчанию result \"0\"\r\n\r\n  function getStaticInfo(selector, activeClass) {\r\n    // получение статичных данных с выбранных полей\r\n    const elements = document.querySelectorAll(selector); //получение дочерних элементов для делигирования\r\n\r\n    elements.forEach((elem) => {\r\n      elem.addEventListener('click', (e) => {\r\n        if (e.target.getAttribute('data-ratio')) {\r\n          ratio = +e.target.getAttribute('data-ratio'); // получение данных по дата атрибуту\r\n          localStorage.setItem('Ratio', +e.target.getAttribute('data-ratio')); // сохраняем ratio в локальной БД\r\n        } else {\r\n          sex = e.target.getAttribute('id');\r\n          localStorage.setItem('Sex', e.target.getAttribute('id')); // сохраняем gender в локальной БД\r\n        }\r\n\r\n        elements.forEach((elem) => {\r\n          // отключение всех полей\r\n          elem.classList.remove(activeClass);\r\n        });\r\n        console.log(sex, ratio);\r\n        e.target.classList.add(activeClass); // активация выбранного поля\r\n        calcTotal(); // расчёт и вывод\r\n      });\r\n    });\r\n  }\r\n\r\n  getStaticInfo('#gender div', 'calculating__choose-item_active'); // получение гендера и активация\r\n  getStaticInfo(\r\n    '.calculating__choose_big div',\r\n    'calculating__choose-item_active'\r\n  ); // получение ratio и активация\r\n\r\n  function getDynamicInfo(selector) {\r\n    // получение динамических данных от пользователя с полей заполнения\r\n    const input = document.querySelector(selector);\r\n\r\n    input.addEventListener('input', () => {\r\n      if (input.value.match(/\\D/g)) {\r\n        // проверка на ввод символов кроме чисел\r\n        input.style.border = '1px solid red'; // выделение полей красным при вводе нечисел\r\n      } else {\r\n        input.style.border = 'none';\r\n      }\r\n\r\n      switch (\r\n        input.getAttribute('id') //получение данных с заполняемых полей из input\r\n      ) {\r\n        case 'height':\r\n          height = +input.value;\r\n          break;\r\n        case 'weight':\r\n          weight = +input.value;\r\n          break;\r\n        case 'age':\r\n          age = +input.value;\r\n          break;\r\n      }\r\n      calcTotal(); // расчёт и вывод\r\n    });\r\n  }\r\n  getDynamicInfo('#height'); // вызов данных по id\r\n  getDynamicInfo('#weight');\r\n  getDynamicInfo('#age');\r\n}\r\n\r\nmodule.exports = calc;\r\n","function cards() {\r\n  class MenuItem {\r\n    //конструктор меню табов\r\n    constructor(src, alt, title, descr, price, parent, ...classes) {\r\n      this.src = src;\r\n      this.title = title;\r\n      this.alt = alt;\r\n      this.descr = descr;\r\n      this.price = price;\r\n      this.transfer = 27;\r\n      this.classes = classes;\r\n      this.changeToRuble();\r\n      this.parent = document.querySelector(parent);\r\n      this.renderMenuItem();\r\n    }\r\n\r\n    changeToRuble() {\r\n      //конвертация $ в рубли\r\n      this.price = this.price * this.transfer;\r\n    }\r\n\r\n    renderMenuItem() {\r\n      //рендер табов на страницу\r\n      const NewMenuItem = document.createElement('div');\r\n      if (this.classes.indexOf('menu__item') == -1) {\r\n        //проверка и подставка класса 'menu__item'\r\n        this.element = 'menu__item';\r\n        NewMenuItem.classList.add(this.element);\r\n      }\r\n      this.classes.forEach((className) => NewMenuItem.classList.add(className)); // добавление частных классов через rest оператор если они присутствуют\r\n      NewMenuItem.innerHTML = `\r\n              <img src=${this.src} alt=${this.alt} />\r\n              <h3 class=\"menu__item-subtitle\">Меню \"${this.title}\"</h3>\r\n              <div class=\"menu__item-descr\">${this.descr}</div>\r\n          <div class=\"menu__item-divider\"></div>\r\n          <div class=\"menu__item-price\">\r\n            <div class=\"menu__item-cost\">Цена:</div>\r\n            <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\r\n          </div>`;\r\n      this.parent.append(NewMenuItem); //определение куда встраивать в верстку\r\n    }\r\n  }\r\n\r\n  const getResource = async (url) => {\r\n    //асинхронное получение данных с сервера по url\r\n    let result = await fetch(url); //ожидание резульатов запроса, defualt 30 секунд\r\n\r\n    if (!result.ok) {\r\n      // проверяет результат fetch на наличие ошибок при запросе данных, т.к. 404 для него не ошибка.\r\n      throw new Error(`Could not fetch ${url}, status: ${result.status}`); // если нет результата, создание ошибки и вывод\r\n    }\r\n\r\n    return await result.json(); // возвращение результата в виде promise в формате json\r\n  };\r\n\r\n  getResource('http://localhost:3000/menu').then((data) => {\r\n    //получение данных из БД\r\n    data.forEach(({ img, alt, title, descr, price, parent }) => {\r\n      // создание массива по свойствам\r\n      new MenuItem(img, alt, title, descr, price, parent); // создание экзепляра через конструктор по свойствам и значениям\r\n    });\r\n  });\r\n}\r\n\r\nmodule.exports = cards;\r\n","function forms() {\r\n  const forms = document.querySelectorAll('form'); //форма в модальном окне которая заполняется пользователем\r\n\r\n  const message = {\r\n    //содержание сообщения о статусе отправки данных пользователя через модальное окно\r\n    loading: 'img/forms/spinner.svg',\r\n    success: 'Спасибо! Скоро мы с вами свяжeмся!',\r\n    failure: 'Что то пошло не так x_X',\r\n  };\r\n\r\n  forms.forEach((item) => {\r\n    // для срабатывания каждой формы на странице при отправке\r\n    bindPostData(item);\r\n  });\r\n\r\n  const postData = async (url, data) => {\r\n    //асинхронная отправка данных на сервер в БД\r\n    let result = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: data,\r\n    });\r\n    return await result.json();\r\n  };\r\n\r\n  function bindPostData(form) {\r\n    // обработчик отправки данных пользователя\r\n    form.addEventListener('submit', (e) => {\r\n      e.preventDefault();\r\n\r\n      const statusMessage = document.createElement('img'); // вывод спиннера во время ожидания отправки\r\n      statusMessage.src = message.loading;\r\n      statusMessage.style.cssText = `\r\n            display: block;\r\n            margin: 0 auto;\r\n        `;\r\n      form.insertAdjacentElement('afterend', statusMessage); // добавляет спиннер в DOM-дерево после формы с сообщением\r\n\r\n      const formData = new FormData(form); //создание специального экземпляра, позволяет не устанавливать заголовки\r\n\r\n      let json = JSON.stringify(Object.fromEntries(formData.entries())); //преобразование массива в объект, а затем объекта в JSON формат для отправки\r\n\r\n      postData('http://localhost:3000/requests', json)\r\n        .then((data) => {\r\n          console.log(data);\r\n          showThanksModal(message.success);\r\n        })\r\n        .catch(() => {\r\n          showThanksModal(message.failure); //вывод сообщения об ошибке\r\n        })\r\n        .finally(() => {\r\n          // метод срабатывающий при обоих исходах then и catch\r\n          form.reset(); // сброс данных в форме\r\n          statusMessage.remove();\r\n        });\r\n    });\r\n\r\n    function showThanksModal(message) {\r\n      //вывод сообщения об статусе отправки ввиде модального окна\r\n      const prevModalDialog = document.querySelector('.modal__dialog');\r\n\r\n      prevModalDialog.classList.add('hide'); // скрытие прочих модальных окон\r\n      openModal();\r\n\r\n      const thanksModal = document.createElement('div'); // создания модального окна с благодарностью либо об ошибке\r\n      thanksModal.classList.add('modal__dialog');\r\n      thanksModal.innerHTML = `\r\n        <div class=\"modal__content\">\r\n            <div class=\"modal__close\" data-close>×</div>\r\n            <div class=\"modal__title\">${message}</div> \r\n        </div>\r\n      `;\r\n\r\n      document.querySelector('.modal').append(thanksModal);\r\n      setTimeout(() => {\r\n        // автоматическое скрытие модального окна через время\r\n        thanksModal.remove();\r\n        prevModalDialog.classList.add('show');\r\n        prevModalDialog.classList.remove('hide');\r\n        closeModal();\r\n      }, 4000);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = forms;\r\n","function modal() {\r\n  const modalTrigger = document.querySelectorAll('[data-modal]'),\r\n    modal = document.querySelector('[data-modalWindow]');\r\n\r\n  modalTrigger.forEach((btn) => {\r\n    //обработчик события на все кнопки для модальных окон\r\n    btn.addEventListener('click', openModal);\r\n  });\r\n\r\n  function openModal() {\r\n    modal.classList.add('show');\r\n    modal.classList.remove('hide');\r\n    document.body.style.overflowY = 'hidden';\r\n    // clearInterval(modalTimerId); // сброс автооткрытия окна после единождого открытия\r\n    window.removeEventListener('scroll', showModalByScroll);\r\n  }\r\n\r\n  function closeModal() {\r\n    modal.classList.add('hide');\r\n    modal.classList.remove('show');\r\n    document.body.style.overflowY = '';\r\n  }\r\n\r\n  modal.addEventListener('click', (e) => {\r\n    if (e.target === modal || e.target.getAttribute('data-close') == '') {\r\n      closeModal();\r\n    }\r\n  });\r\n\r\n  document.addEventListener('keydown', (e) => {\r\n    // обработчик события на клавишу \"Escape\"\r\n    if (e.code === 'Escape' && modal.classList.contains('show')) {\r\n      closeModal();\r\n    }\r\n  });\r\n\r\n  // const modalTimerId = setTimeout(openModal, 50000); // автооткрытие модального окна через время\r\n\r\n  function showModalByScroll() {\r\n    //открытие модального окна при промотке до конца страницы\r\n    if (\r\n      window.pageYOffset + document.documentElement.clientHeight >=\r\n      document.documentElement.scrollHeight\r\n    ) {\r\n      openModal();\r\n      window.removeEventListener('scroll', showModalByScroll);\r\n    }\r\n  }\r\n\r\n  window.addEventListener('scroll', showModalByScroll);\r\n}\r\n\r\nmodule.exports = modal;\r\n","function slider() {\r\n  const sliders = document.querySelectorAll('.offer__slide'),\r\n    counterTotal = document.querySelector('#total'),\r\n    counterCurrent = document.querySelector('#current'),\r\n    sliderPrev = document.querySelector('.offer__slider-prev'),\r\n    sliderNext = document.querySelector('.offer__slider-next'),\r\n    slidesWrapper = document.querySelector('.offer__slider-wrapper'), // ячейка обзора слайдов\r\n    slidesField = document.querySelector('.offer__slider-inner'), // поле объединённых слайдов\r\n    slideWidth = window.getComputedStyle(slidesWrapper).width; // ширина для подгонки всех слайдов под ячейку\r\n\r\n  let offset = 0; // отступ во время transition, текущее положение slidesField\r\n  let counter = 1;\r\n\r\n  counterTotal.innerHTML = getZero(sliders.length); // добавление 0 перед одинарным числом\r\n  counterCurrent.innerHTML = getZero(counter);\r\n\r\n  slidesField.style.width = 100 * sliders.length + '%'; // занимает 400% ширины slidesWrapper\r\n  slidesField.style.display = 'flex';\r\n  slidesField.style.transition = '0.5s all'; // время перемещения слайдов\r\n\r\n  slidesWrapper.style.overflow = 'hidden'; // скрытие слайдов не попадающих в ячейку slidesField\r\n\r\n  sliders.forEach((slide) => {\r\n    // подгон ширины всех слайдов под ширину ячейки\r\n    slide.style.width = slideWidth;\r\n  });\r\n\r\n  sliderNext.addEventListener('click', () => {\r\n    if (\r\n      offset ==\r\n      deleteNoNumbers(slideWidth) * (sliders.length - 1) // показ первого слайда если смещение равно максимальной ширине\r\n    ) {\r\n      offset = 0;\r\n    } else {\r\n      offset += deleteNoNumbers(slideWidth); // смещение на еденицу ширины слайда влево\r\n    }\r\n\r\n    if (counter == sliders.length) {\r\n      // замчкание счётчика конца с началом\r\n      counter = 1;\r\n    } else {\r\n      counter++;\r\n    }\r\n\r\n    activateSlider(); // обновляем активность слайдера\r\n  });\r\n\r\n  sliderPrev.addEventListener('click', () => {\r\n    if (offset == 0) {\r\n      // показ последнего слайда если смещение равно 0\r\n      offset = deleteNoNumbers(slideWidth) * (sliders.length - 1); // последний слайд\r\n    } else {\r\n      offset -= deleteNoNumbers(slideWidth); // смещение на еденицу ширины слайда вправо\r\n    }\r\n\r\n    if (counter == 1) {\r\n      // замыкание счётчика начала с концом\r\n      counter = sliders.length;\r\n    } else {\r\n      counter--;\r\n    }\r\n\r\n    activateSlider(); // обновляем активность слайдера\r\n  });\r\n\r\n  //Slider navigator\r\n\r\n  const sliderOffer = document.querySelector('.offer__slider'), // находим общую обёртку слайдера\r\n    dots = []; // создаем массив для точек навигации\r\n\r\n  sliderOffer.style.position = 'relative'; // устанавливаем \"местную\" ось координат\r\n\r\n  const navigatorBlock = document.createElement('ul'); // создаем блок список\r\n  sliderOffer.append(navigatorBlock); // помещаем элемент в обёртку слайдера\r\n\r\n  navigatorBlock.classList.add('carousel-indicators'); // применяем стили для точек списка\r\n\r\n  for (let i = 0; i < sliders.length; i++) {\r\n    // создаем точки списка из кол-ва слайдов\r\n    const dot = document.createElement('li');\r\n    dot.setAttribute('data-slide-to', i + 1); // задаём индивидуальный дата-аттрибут каждой точке списка\r\n    dot.classList.add('dot');\r\n    navigatorBlock.append(dot); // помещаем точки в блок список\r\n\r\n    if (i == 0) {\r\n      // по-умолчанию 1 точка активна\r\n      dot.style.opacity = 1;\r\n    }\r\n\r\n    dots.push(dot); // помещаем каждый эелемент (точку) списка в массив dots\r\n  }\r\n\r\n  function getZero(num) {\r\n    // позволяет получать 0 перед однозначным числом\r\n    if (num >= 0 && num < 10) {\r\n      return `0${num}`;\r\n    } else {\r\n      return num;\r\n    }\r\n  }\r\n\r\n  function activateSlider() {\r\n    // задание активного слайдера\r\n    dots.forEach((dot) => (dot.style.opacity = '.5')); //задаем всем точкам навигатора неактивность\r\n\r\n    dots[counter - 1].style.opacity = 1; // обновляем текущий активный слайд в навигаторе\r\n\r\n    slidesField.style.transform = `translateX(-${offset}px)`; // смещение по Х на заданное расстояние\r\n\r\n    counterCurrent.innerHTML = getZero(counter); //обновляем текущий счётчик\r\n  }\r\n\r\n  dots.forEach((dot) => {\r\n    // навещиваем обраточик события на каждую точку через массив\r\n    dot.addEventListener('click', (event) => {\r\n      const slideTo = event.target.getAttribute('data-slide-to'); // создаем счётчик по дата-аттрибуту выбранной точки\r\n      counter = slideTo; // обновляем счётик на странице\r\n      offset = deleteNoNumbers(slideWidth) * (slideTo - 1); // устанавливаем смещение по дата-аттрибуту выбранной точки\r\n\r\n      activateSlider(); // обновляем активность слайдера\r\n    });\r\n  });\r\n\r\n  function deleteNoNumbers(str) {\r\n    // находит в строке Нечисла и удаляет их\r\n    return +str.replace(/\\D/g, '');\r\n  }\r\n}\r\n\r\nmodule.exports = slider;\r\n","function tabs() {\r\n  const tabs = document.querySelectorAll('.tabheader__item'),\r\n    tabsContent = document.querySelectorAll('.tabcontent'),\r\n    tabsParent = document.querySelector('.tabheader__items');\r\n\r\n  function hideTabContent() {\r\n    tabsContent.forEach((item) => {\r\n      item.style.display = 'none';\r\n    }); // скрывает прочие окна из списка табов\r\n\r\n    tabs.forEach((tab) => {\r\n      tab.classList.remove('tabheader__item_active');\r\n    }); // удаляет класс активный из всех табов\r\n  }\r\n\r\n  function showTabContent(i = 0) {\r\n    tabsContent[i].style.display = 'block';\r\n    tabs[i].classList.add('tabheader__item_active');\r\n  } // отображает выбранный i тый блок и добавляет класс активный\r\n\r\n  hideTabContent();\r\n  showTabContent();\r\n\r\n  tabsParent.addEventListener('click', (event) => {\r\n    const target = event.target;\r\n\r\n    if (target && target.classList.contains('tabheader__item')) {\r\n      tabs.forEach((item, i) => {\r\n        if (target == item) {\r\n          hideTabContent();\r\n          showTabContent(i);\r\n        }\r\n      });\r\n    } // по клику перебирает все табы из списка и находит сравнением кликнутый, затем применяет функции\r\n  });\r\n}\r\n\r\nmodule.exports = tabs;\r\n","function timer() {\r\n  const deadline = '2021-12-28T22:35:00'; //конец таймера акции\r\n\r\n  function getTimeReamaining(endtime) {\r\n    // реализация таймера по дням,часам,минутам,секундам до конца акции\r\n    const t = Date.parse(endtime) - Date.parse(new Date()), // разница между концом акции и настоящим временем\r\n      days = Math.floor(t / (1000 * 60 * 60 * 24)),\r\n      hours = Math.floor((t / (1000 * 60 * 60)) % 24),\r\n      minutes = Math.floor((t / (1000 * 60)) % 60),\r\n      seconds = Math.floor((t / 1000) % 60);\r\n\r\n    return {\r\n      total: t,\r\n      days,\r\n      hours,\r\n      minutes,\r\n      seconds,\r\n    };\r\n  }\r\n\r\n  function getZero(num) {\r\n    // позволяет получать 0 перед однозначным числом\r\n    if (num >= 0 && num < 10) {\r\n      return `0${num}`;\r\n    } else {\r\n      return num;\r\n    }\r\n  }\r\n\r\n  function setClock(selector, endtime) {\r\n    //вывод таймера на страницу\r\n    const timer = document.querySelector(selector),\r\n      days = timer.querySelector('#days'),\r\n      hours = timer.querySelector('#hours'),\r\n      minutes = timer.querySelector('#minutes'),\r\n      seconds = timer.querySelector('#seconds'),\r\n      timeInterval = setInterval(updateClock, 1000); //вызов обновления с интвервалом\r\n\r\n    updateClock();\r\n\r\n    function updateClock() {\r\n      // обновление таймера через заданный интервал (1 секунда)\r\n      const t = getTimeReamaining(endtime);\r\n\r\n      days.innerHTML = getZero(t.days);\r\n      hours.innerHTML = getZero(t.hours);\r\n      minutes.innerHTML = getZero(t.minutes);\r\n      seconds.innerHTML = getZero(t.seconds);\r\n\r\n      if (t.total <= 0) {\r\n        // чтобы таймер не уходил в отрицательные значения\r\n        clearInterval(timeInterval);\r\n        days.innerHTML = 0;\r\n        hours.innerHTML = 0;\r\n        minutes.innerHTML = 0;\r\n        seconds.innerHTML = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  setClock('.timer', deadline);\r\n}\r\n\r\nmodule.exports = timer;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","window.addEventListener('DOMContentLoaded', () => {\n  const tabs = require('./modules/tabs'),\n    calc = require('./modules/calc'),\n    cards = require('./modules/cards'),\n    forms = require('./modules/forms'),\n    modal = require('./modules/modal'),\n    slider = require('./modules/slider'),\n    timer = require('./modules/timer');\n\n  tabs();\n  modal();\n  timer();\n  calc();\n  forms();\n  slider();\n  cards();\n});\n"],"names":[],"sourceRoot":""}